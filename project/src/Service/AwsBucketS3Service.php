<?php

namespace App\Service;


use Aws\S3\Exception\S3Exception;
use Aws\S3\S3Client;


class AwsBucketS3Service
{
    /**
     * @param string $awsBucketName The bucket name is placed in the .env file (or .env.local file) and then injected into services.yaml
     * @param S3Client $s3Client Automatically inject into "services.yaml"
     */
    public function __construct(
        private readonly string   $awsBucketName,
        private readonly S3Client $s3Client
    )
    {
    }

    /**
     * @param string $imageName A unique name generated by the "ImageService" service
     * @param string $pathName The temporary path of the file
     * @return array
     */
    public function addImage(string $imageName, string $pathName): array
    {
        try {
            $result = $this->s3Client->putObject([
                'Bucket' => $this->awsBucketName,
                'Key' => $imageName,
                'ACL' => 'public-read',
                'SourceFile' => $pathName
            ]);
            return ['status' => 'success', 'url' => $result->get('ObjectURL')];
        } catch (S3Exception $e) {
            return ['status' => 'failure', 'message' => $e->getMessage()];
        } catch (\Exception $e) {
            return ['status' => 'failure', 'message' => 'Erreur inattendue: ' . $e->getMessage()];
        }

    }


    /**
     * @param int $limit The image limit per page
     * @param string|null $continuationToken A continuation token used to retrieve the next batch of items
     * @return array|string[]
     *
     */
    public function listImages(int $limit, string $continuationToken = null): array
    {
        if (empty($this->awsBucketName)) {
            return ['status' => 'failure', 'message' => 'Le nom du bucket S3 n\'est pas dÃ©fini.'];
        }

        try {
            // Building parameters for S3 query
            $params = [
                'Bucket' => $this->awsBucketName,
                'MaxKeys' => $limit,
            ];

            // If a ContinuationToken is provided, add it to the settings
            if ($continuationToken) {
                $params['ContinuationToken'] = $continuationToken;
            }

            // Retrieves objects from bucket with native pagination
            $result = $this->s3Client->listObjectsV2($params);

            // Initialize an array to store image information
            $images = [];

            //check if there are objects in the bucket
            if (isset($result['Contents']) && !empty($result['Contents'])) {
                foreach ($result['Contents'] as $object) {
                    $images[] = [
                        'Key' => $object['Key'],
                        'LastModified' => $object['LastModified'],
                        'Size' => $object['Size'],
                        'StorageClass' => $object['StorageClass'],
                        'Url' => $this->s3Client->getObjectUrl($this->awsBucketName, $object['Key']),
                    ];
                }
            }

            // Return image information with pagination information
            return [
                'status' => 'success',
                'images' => $images,
                'isTruncated' => $result['IsTruncated'], // Indicates if there are more items to collect
                'nextContinuationToken' => $result['NextContinuationToken'] ?? null, // Token to retrieve the following items
            ];

        } catch (S3Exception $e) {
            return ['status' => 'failure', 'message' => $e->getMessage()];
        } catch (\Exception $e) {
            return ['status' => 'failure', 'message' => 'Erreur inattendue: ' . $e->getMessage()];
        }
    }

    /**
     * @param string $imageKey
     * @return array|string[]
     */
    public function deleteImage(string $imageKey): array
    {
        try {
            // Deleting the object in the S3 bucket
            $this->s3Client->deleteObject([
                'Bucket' => $this->awsBucketName,
                'Key' => $imageKey,
            ]);

            return ['status' => 'success', 'message' => 'Image supprimÃ©e avec succÃ¨s.'];
        } catch (S3Exception $e) {
            return ['status' => 'failure', 'message' => $e->getMessage()];
        } catch (\Exception $e) {
            return ['status' => 'failure', 'message' => 'Erreur inattendue: ' . $e->getMessage()];
        }
    }

}